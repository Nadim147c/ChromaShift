name: Continuous Integration

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  test:
    name: Lint and Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone the git repository
        uses: actions/checkout@main

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/*.sum"

      - name: Go Tidy
        run: go mod tidy && git diff --exit-code

      - name: Go Mod
        run: go mod download

      - name: Go Mod Verify
        run: go mod verify

      - name: Go Install
        run: go get -v

      - name: Go Build
        run: go build -v

  changelog:
    name: Generate Changelog and Bump Version
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    outputs:
      clean_changelog: ${{ steps.changelog.outputs.clean_changelog }}
      skipped: ${{ steps.changelog.outputs.skipped }}
      tag: ${{ steps.changelog.outputs.tag }}
    steps:
      - name: Clone the git repository
        uses: actions/checkout@main

      - name: Conventional changelog action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          preset: "conventionalcommits"
          skip-commit: true

  build:
    name: Build the binaries for release
    needs: [test, changelog]
    if: ${{ needs.changelog.outputs.skipped == 'false' }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu, os: linux }
          - { runner: macos, os: darwin }
    runs-on: ${{ matrix.runner }}-latest

    steps:
      - name: Check out code
        uses: actions/checkout@main

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: "**/*.sum"

      - name: Build binary
        shell: bash
        run: |
          VERSION=$(echo "${{ needs.changelog.outputs.tag }}")
          GOOS=$(echo "${{ matrix.os }}")

          GOOS=$GOOS GOARCH=amd64 go build -ldflags "-X colorize/cmd.Version=$VERSION" -o ./bin/colorize-$GOOS-$GOARCH
          GOOS=$GOOS GOARCH=arm64 go build -ldflags "-X colorize/cmd.Version=$VERSION" -o ./bin/colorize-$GOOS-$GOARCH

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: colorize-${{ matrix.os }}-${{ matrix.arch }}
          path: ./bin/colorize*

  release:
    name: Create the release
    needs: [test, changelog, build]
    if: ${{ needs.changelog.outputs.skipped == 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Clone the git repository
        uses: actions/checkout@main

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./bin/

      - name: Generate Completions
        run: |
          mkdir completions
          cp ./bin/colorize-linux-amd64/colorize-linux-amd64 colorize
          chmod +x ./colorize
          ./colorize completion zsh > completions/_colorize
          ./colorize completion bash > completions/colorize.bash
          ./colorize completion fish > completions/colorize.fish

      - name: Archive Builds
        shell: bash
        run: |
          mkdir archives
          for BIN in ./bin/**/* ;do
            mv -f "$BIN" bin/colorize
            BIN_NAME=$(basename "$BIN")
            tar -czvf archives/$BIN_NAME.tar.gz bin/colorize rules/* completions/* colorize.*
          done

      - name: Create release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          artifacts: "archives/*"
          tag: ${{ needs.changelog.outputs.tag }}
          name: ${{ needs.changelog.outputs.tag }}
          body: ${{ needs.changelog.outputs.clean_changelog }}
